import os
import json
from aiogram import Bot, Dispatcher
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.filters import Command
from aiogram.enums import ParseMode
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))  # –£–∫–∞–∂–∏—Ç–µ ADMIN_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤
try:
    with open("offers.json", "r", encoding="utf-8") as f:
        offers = json.load(f)
except FileNotFoundError:
    print("–§–∞–π–ª offers.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤
def build_offer_keyboard(offer_list):
    keyboard = []
    for offer in offer_list:
        keyboard.append([InlineKeyboardButton(text=offer['title'], url=offer['link'])])
    keyboard.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üí≥ –î–µ–±–µ—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã", callback_data="cards")],
    [InlineKeyboardButton(text="üîñ –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã", callback_data="stickers")],
    [InlineKeyboardButton(text="üßæ –í–∫–ª–∞–¥—ã", callback_data="deposits")],
    [InlineKeyboardButton(text="üí∏ –ó–∞–π–º—ã", callback_data="loans")],
    [InlineKeyboardButton(text="üöó –ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç—ã", callback_data="auto_loans")],
    [InlineKeyboardButton(text="üí∞ –ö—Ä–µ–¥–∏—Ç—ã –Ω–∞–ª–∏—á–Ω—ã–º–∏", callback_data="cash_loans")],
    [InlineKeyboardButton(text="üíº –†–∞–±–æ—Ç–∞ –≤ –±–∞–Ω–∫–∞—Ö", callback_data="bank_jobs")]
])

# –ö–æ–º–∞–Ω–¥–∞ /start –∏ /menu
@dp.message(Command("start"))
@dp.message(Command("menu"))
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ê—à–∞–∫ –ë–æ—Ç. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=main_menu_kb)

# –ê–¥–º–∏–Ω–∫–∞ ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(Command("admin"))
async def cmd_admin(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ.")
        return

    await message.answer("üîê –í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω–∫—É.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n‚Ä¢ /menu ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback'–æ–≤
@dp.callback_query()
async def handle_callback(callback: CallbackQuery):
    category = callback.data

    if category == "back":
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=main_menu_kb)
        return

    if category in offers:
        keyboard = build_offer_keyboard(offers[category])
        title_map = {
            "cards": "üí≥ –î–µ–±–µ—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã",
            "stickers": "üîñ –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã",
            "deposits": "üßæ –í–∫–ª–∞–¥—ã",
            "loans": "üí∏ –ó–∞–π–º—ã",
            "auto_loans": "üöó –ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç—ã",
            "cash_loans": "üí∞ –ö—Ä–µ–¥–∏—Ç—ã –Ω–∞–ª–∏—á–Ω—ã–º–∏",
            "bank_jobs": "üíº –†–∞–±–æ—Ç–∞ –≤ –±–∞–Ω–∫–∞—Ö"
        }
        text = f"–í–æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{title_map.get(category, category)}*:"
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
    else:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")

# === –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º ===
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
