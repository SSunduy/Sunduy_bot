import json
from aiogram import Bot, Dispatcher
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.enums import ParseMode

# –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
TOKEN = "8081332992:AAFyARu3WQjkvlXQU9PBKUNR3Sb1U7yl2Mk"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤ –∏–∑ JSON
try:
    with open("offers.json", "r", encoding="utf-8") as f:
        offers = json.load(f)
except FileNotFoundError:
    print("–§–∞–π–ª offers.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

def build_offer_keyboard(offer_list):
    keyboard = []
    for offer in offer_list:
        keyboard.append([InlineKeyboardButton(text=offer['title'], url=offer['link'])])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@dp.message(Command("start"))
async def cmd_start(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú–∏–∫—Ä–æ–∑–∞–π–º—ã", callback_data="loans")],
        [InlineKeyboardButton(text="–î–µ–±–µ—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã", callback_data="cards")]
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ê—à–∞–∫ –ë–æ—Ç. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=kb)

@dp.callback_query()
async def show_offers(callback_query):
    category = callback_query.data
    if category in offers:
        keyboard = build_offer_keyboard(offers[category])
        text = f"–í–æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{ '–ó–∞–π–º—ã' if category == 'loans' else '–ö–∞—Ä—Ç—ã' }*:"
        await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
    else:
        await callback_query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")

# === –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º ===
async def main():
    await bot.delete_webhook(drop_pending_updates=True)  # üëà –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
